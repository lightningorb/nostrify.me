import { print } from '$lib/utils.coffee'
import { bech32, fromWords, toWords } from '$lib/bech32.js'

var Key, hex_char, hex_encode;

hex_char = function(val) {
  if (val < 10) {
    return String.fromCharCode(48 + val);
  } else if (val < 16) {
    return String.fromCharCode(97 + val - 10);
  }
};

hex_encode = function(buf) {
  var i, ref, str;
  ref = ['', 0], str = ref[0], i = ref[1];
  i = 0;
  while (i < buf.length) {
    str += hex_char(buf[i] >> 4);
    str += hex_char(buf[i] & 0xF);
    i++;
  }
  return str;
};

export function key_to_hex_key(key) {
  return hex_encode(fromWords(bech32.decode(key).words));
};

export function hex_key_to_key(prefix, hex_key) {
  var bytes, i, ref;
  ref = [new Uint8Array(hex_key.length / 2), 0], bytes = ref[0], i = ref[1];
  while (i < hex_key.length) {
    bytes[i / 2] = parseInt(hex_key.substring(i, i + 2), 16);
    i += 2;
  }
  return bech32.encode(prefix, toWords(bytes));
};

export default Key = (function() {
  function Key(key) {
    this.key = key;
    return this;
  }

  Key.prototype.is_note = function() {
    return this.key.slice(0, 4) === 'note';
  };

  Key.prototype.as_hex = function() {
    if (this.is_note()) {
      return key_to_hex_key(this.key);
    } else {
      return this.key;
    }
  };

  return Key;

})();

// ---
// generated by coffee-script 1.9.2